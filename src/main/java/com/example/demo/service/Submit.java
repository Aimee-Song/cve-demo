package com.example.demo.service;

public class Submit {

    public static void main(String[] args) {
        //solution(1000000d,7, 0.003959d);
        //System.out.println(solution("xyyxzx"));;
        solution("ccacbdaoeneoanddo", 'a');
    }

    /*
    p 本金
    n 期数
    r 月利息
     */
    public static double[] solution(double p, int n, double r) {
        double[] arr = new double[n];
        double sum = 0d;
        for(int i = 1; i <= n; i ++) {
            arr[i] = (p / n) + (p - sum) * r;
            sum += (p / n);
            arr[i] = Double.valueOf(String.format("%.2f", arr[i]));
        }
        return arr;
    }

    public static String solution(String s) {
        int n = s.length();
        int i = 0;
        char[] c = new char[n];	//创建一个新数组
        for (int j = 0; j < n; j++) {	//遍历字符串S
            if (i > 0 && c[i - 1] == s.charAt(j)) {	//标记i>0并且相邻的两个字符相等时
                i--;	//标记i--
            } else {
                c[i++] = s.charAt(j);	//将当前字符存入数组c中
            }
        }
        return new String(c, 0, i);
    }

    public static int[] solution(String str, char c) {
        int[] arr = new int[str.length()];
        byte[] arrStr = str.getBytes();
        int count = str.length()-(str.replace(c+"", "").length());
        int[] arrc = new int[count];
        int last = 0;
        for(int i = 0; i < count; i ++) {
            arrc[i] = str.indexOf(c)+last;
            last = arrc[i]+1;
            System.out.println(arrc[i]);
            str=str.substring(arrc[i]+1, str.length());
            System.out.println(str);
        }
        /*for(byte s : arrStr) {
            arrc = arrStr.length;
        }
        for(int i = 0; i < arrStr.length; i ++) {
            if(arrStr[i] == c){
                arr[i] = 0;
            }else {
                for(byte s : arrStr) {

                }
            }
        }*/
        return arr;
    }
}
